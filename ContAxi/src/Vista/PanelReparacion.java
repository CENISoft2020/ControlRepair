/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;


import com.mysql.jdbc.Statement;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.Timer;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.*;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.*;
import java.util.Calendar;
import javax.swing.table.DefaultTableModel;

import java.sql.ResultSet;
import java.text.SimpleDateFormat;

import java.sql.Timestamp; // Asegúrate de importar esto
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.util.Date;
/**
 *
 * @author Andres Gordillo
 */
public class PanelReparacion extends javax.swing.JFrame {
    

    /**
     * Creates new form PanelReparacion
     */
    public PanelReparacion() {
        initComponents();
          Data();
        setLocationRelativeTo(null); // Centrar el JFrame en la pantalla
        cargarDatosEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Vensim Sans Mono", 1, 15)); // NOI18N
        jLabel1.setText("Inventario Panel de reparacion ");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre_Cliente", "Equipo_Cliente", "Daño_Equipo", "Proceso_Reparacion", "Repuestos", "Fecha_Ingreso", "Fecha_Salida", "Estado", "Tiempo_equipo", "Detalle"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Estado Reparacion:"));

        jCheckBox1.setBackground(new java.awt.Color(51, 255, 0));
        jCheckBox1.setText("Reparado");
        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseClicked(evt);
            }
        });

        jCheckBox2.setBackground(new java.awt.Color(255, 204, 0));
        jCheckBox2.setText("Pendiente");
        jCheckBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox2MouseClicked(evt);
            }
        });

        jCheckBox3.setBackground(new java.awt.Color(255, 0, 0));
        jCheckBox3.setText("Sin Reparacion");
        jCheckBox3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox3, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox3)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Control Registro:"));

        jButton4.setBackground(new java.awt.Color(51, 255, 51));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton4.setText("Agregar Celular");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 204, 0));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton5.setText("Actualizar Datos");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 204, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setText("Equipo Entregado");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 51, 51));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setText("Elliminar Dato");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );

        jTextField1.setBorder(javax.swing.BorderFactory.createTitledBorder("Nombre_Cliente:"));

        jTextField2.setBorder(javax.swing.BorderFactory.createTitledBorder("Equipo_Cliente:"));

        jTextField3.setBorder(javax.swing.BorderFactory.createTitledBorder("Daño_Equipo:"));

        jTextField4.setBorder(javax.swing.BorderFactory.createTitledBorder("Proceso_Repacion:"));

        jTextField5.setBorder(javax.swing.BorderFactory.createTitledBorder("Repuesto:"));

        jTextField6.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar equipo:"));
        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField6KeyReleased(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Image/Portada2.jpg"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Fecha:");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Yu Gothic Light", 3, 14)); // NOI18N
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Image/Azmuth (2).png"))); // NOI18N
        jLabel4.setText("! Hora de Reparar ¡");

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("Limpiar Cambios");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(145, 145, 145))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(11, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(7, 7, 7)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton3)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        cargarDatos();
        cargarDatosEnTabla();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
         
    // Obtener la fila seleccionada en la JTable
    int filaSeleccionada = jTable1.getSelectedRow();
    
    // Verificar que se haya seleccionado una fila
    if (filaSeleccionada >= 0) {
        // Obtener el nombre del cliente de la fila seleccionada en la JTable
        String nombreSeleccionado = jTable1.getValueAt(filaSeleccionada, 0).toString();

        // Obtener los datos de los campos de texto
        String nombreCli = jTextField1.getText();
        String equipoCli = jTextField2.getText();
        String danoEqui = jTextField3.getText();
        String proceso = jTextField4.getText();
        String repuestos = jTextField5.getText();

 
        // Determinar el estado basado en los JCheckBox
        String estado = "";
        if (jCheckBox1.isSelected()) {
            estado = "Reparado";
        } else if (jCheckBox2.isSelected()) {
            estado = "Pendiente";
        } else if (jCheckBox3.isSelected()) {
            estado = "Sin reparación";
        }

        // Conexión a la base de datos
        String url = "jdbc:mysql://localhost:3306/bd_reparaciones";
        String usuario = "root"; // Cambia esto según tu configuración
        String contraseña = ""; // Cambia esto según tu configuración
        
        Connection conexion = null;
        PreparedStatement pst = null;

        try {
            // Conectar a la base de datos
            conexion = DriverManager.getConnection(url, usuario, contraseña);

            // SQL para actualizar los datos en la tabla basado en el nombre del cliente
            String sql = "UPDATE tabreparacion SET NombreCli = ?, EquipoCli = ?, DañoEqui = ?, Proceso = ?, Repuestos = ?, FechaSalido = ?, Estado = ? WHERE NombreCli = ?";

            // Preparar el statement
            pst = conexion.prepareStatement(sql);

            // Establecer los valores para el statement
            pst.setString(1, nombreCli);
            pst.setString(2, equipoCli);
            pst.setString(3, danoEqui);
            pst.setString(4, proceso);
            pst.setString(5, repuestos);
            pst.setString(6, null); // FechaSalido (puedes modificar esto según tu lógica)
            pst.setString(7, estado); // Estado
            pst.setString(8, nombreSeleccionado); // Nombre del cliente seleccionado

            // Ejecutar la actualización
            pst.executeUpdate();

            // Mostrar un mensaje de éxito o realizar alguna otra acción
            JOptionPane.showMessageDialog(null, "Registro actualizado exitosamente");

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al actualizar los datos: " + e.getMessage());
        } finally {
            // Cerrar recursos
            try {
                if (pst != null) pst.close();
                if (conexion != null) conexion.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione un registro para actualizar.");
    }
   
    cargarDatosEnTabla();
   
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField6KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyReleased
    
        // Obtener el texto ingresado en el campo de búsqueda
    String textoBusqueda = jTextField6.getText().trim();

    // Conexión a la base de datos
    String url = "jdbc:mysql://localhost:3306/bd_reparaciones";
    String usuario = "root"; // Cambia esto según tu configuración
    String contraseña = ""; // Cambia esto según tu configuración

    Connection conexion = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    try {
        // Conectar a la base de datos
        conexion = DriverManager.getConnection(url, usuario, contraseña);

        // Construir la consulta SQL para buscar en múltiples columnas
        String sql = "SELECT * FROM tabreparacion WHERE " +
                     "NombreCli LIKE ? OR " +
                     "EquipoCli LIKE ? OR " +
                     "DañoEqui LIKE ? OR " +
                     "Proceso LIKE ? OR " +
                     "Repuestos LIKE ? OR " +
                     "FechaInicio LIKE ? OR " +
                     "FechaSalido LIKE ? OR " +
                     "Estado LIKE ? OR " +
                     "Tiempo LIKE ? OR " +
                     "Detalle LIKE ?";

        // Preparar el statement
        pst = conexion.prepareStatement(sql);

        // Establecer el valor para el parámetro de búsqueda
        String parametroBusqueda = "%" + textoBusqueda + "%";
        for (int i = 1; i <= 10; i++) {
            pst.setString(i, parametroBusqueda);
        }

        // Ejecutar la consulta
        rs = pst.executeQuery();

        // Limpiar la tabla antes de llenarla con los nuevos resultados
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        modelo.setRowCount(0);

        // Recorrer los resultados y agregarlos a la JTable
        while (rs.next()) {
            Object[] fila = new Object[10];
            fila[0] = rs.getString("NombreCli");
            fila[1] = rs.getString("EquipoCli");
            fila[2] = rs.getString("DañoEqui");
            fila[3] = rs.getString("Proceso");
            fila[4] = rs.getString("Repuestos");

            // Leer directamente las fechas como están en la base de datos
            fila[5] = rs.getObject("FechaInicio"); // Usa getObject para mantener el formato original
            fila[6] = rs.getObject("FechaSalido"); // Usa getObject para mantener el formato original

            fila[7] = rs.getString("Estado");
            fila[8] = rs.getInt("Tiempo");
            fila[9] = rs.getString("Detalle");

            modelo.addRow(fila);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al realizar la búsqueda: " + e.getMessage());
    } finally {
        // Cerrar recursos
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (conexion != null) conexion.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField6KeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

  // Obtener la fila seleccionada en la JTable
    int filaSeleccionada = jTable1.getSelectedRow();
    
    // Obtén los datos de los campos de texto
    String nombreCli = jTextField1.getText();
    String equipoCli = jTextField2.getText();
    String danoEqui = jTextField3.getText();
    String proceso = jTextField4.getText();
    String repuestos = jTextField5.getText();
    String fechaInicioStr = jLabel3.getText(); // Fecha de inicio desde el jLabel
    String estado = "";
    
    if (jCheckBox1.isSelected()) {
        estado = "Reparado";
    } else if (jCheckBox2.isSelected()) {
        estado = "Pendiente";
    } else if (jCheckBox3.isSelected()) {
        estado = "Sin reparación";
    }

    // Verificar que se haya seleccionado una fila
    if (filaSeleccionada >= 0) {
        // Obtener el nombre del registro seleccionado
        String nombreSeleccionado = jTable1.getValueAt(filaSeleccionada, 0).toString(); // Supón que el nombre está en la primera columna

        // Conexión a la base de datos
        String url = "jdbc:mysql://localhost:3306/bd_reparaciones";
        String usuario = "root"; // Cambia esto según tu configuración
        String contraseña = ""; // Cambia esto según tu configuración

        Connection conexion = null;
        PreparedStatement pst = null;

        // Formato de fecha esperado en jLabel
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy | hh:mm:ss a");


        try {
            // Convertir la cadena a java.sql.Date
            

            // Conectar a la base de datos
            conexion = DriverManager.getConnection(url, usuario, contraseña);

            // SQL para actualizar la fecha de salida en la tabla basado en el nombre
            String sql = "UPDATE tabreparacion SET FechaSalido = ? WHERE NombreCli = ?";

            // Preparar el statement
            pst = conexion.prepareStatement(sql);

            // Establecer la fecha de salida
            pst.setString(1, fechaInicioStr); // Fecha de salida
            pst.setString(2, nombreSeleccionado); // Nombre del cliente

            // Ejecutar la actualización
            pst.executeUpdate();

            // Mostrar un mensaje de éxito
            JOptionPane.showMessageDialog(null, "Fecha de salida registrada exitosamente.");

            // Pinta la celda del registro en azul cielo
            jTable1.setValueAt(fechaInicioStr, filaSeleccionada, 6); // Actualizar en la tabla la columna de FechaSalido
            jTable1.getColumnModel().getColumn(6).setCellRenderer(new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    if (row == filaSeleccionada && column == 6) {
                        cellComponent.setBackground(new Color(135, 206, 235)); // Color azul cielo
                    } else {
                        cellComponent.setBackground(Color.WHITE); // Color de fondo por defecto
                    }
                    return cellComponent;
                }
            });

            // Solicitar el detalle de la reparación y actualizar la base de datos
            solicitarDetalle(nombreCli, equipoCli, danoEqui, proceso, repuestos, estado);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al actualizar la fecha de salida: " + e.getMessage());
        } finally {
            // Cerrar recursos
            try {
                if (pst != null) pst.close();
                if (conexion != null) conexion.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione un registro para actualizar la fecha de salida.");
    }
    
    // Cargar los datos nuevamente en la tabla
    cargarDatosEnTabla();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        
        try {
            int filaSeleccionada = jTable1.getSelectedRow();
    System.out.println("Fila:" + filaSeleccionada);
    int colm = jTable1.getSelectedColumn();

    // Verificar si la celda seleccionada contiene un valor no nulo
    Object valor = jTable1.getValueAt(filaSeleccionada, colm);
    if (valor != null) {
        String Nombre = jTable1.getValueAt(filaSeleccionada, 0).toString();
        String EquipClien = jTable1.getValueAt(filaSeleccionada, 1).toString();
        String DañoClien = jTable1.getValueAt(filaSeleccionada, 2).toString();
        String ProcRep = jTable1.getValueAt(filaSeleccionada, 3).toString();
        String Repuesto = jTable1.getValueAt(filaSeleccionada, 4).toString();
       
        System.out.println("Producto seleccion Nombre:" + Nombre);
        
        
        jTextField1.setText(Nombre);
        jTextField2.setText(EquipClien);
        jTextField3.setText(DañoClien);
        jTextField4.setText(ProcRep);
        jTextField5.setText(Repuesto);

        
    
    } else {
        // Manejar el caso en el que el valor es nulo
        System.out.println("El valor seleccionado es nulo.");
    }
} catch (Exception e) {
    e.printStackTrace();
    // Manejar otras excepciones si es necesario
}

// TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jCheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MouseClicked
        
         if (jCheckBox1.isSelected()) {
        // Desactivar jCheckBox2
        jCheckBox2.setEnabled(false);
        jCheckBox3.setEnabled(false);
    } else {
        // Si jCheckBox1 no está seleccionado, activar jCheckBox2
        jCheckBox2.setEnabled(true);
        jCheckBox3.setEnabled(true);
    }

// TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1MouseClicked

    private void jCheckBox2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox2MouseClicked
        
           if (jCheckBox2.isSelected()) {
        // Desactivar jCheckBox2
        jCheckBox1.setEnabled(false);
        jCheckBox3.setEnabled(false);
    } else {
        // Si jCheckBox1 no está seleccionado, activar jCheckBox2
        jCheckBox1.setEnabled(true);
        jCheckBox3.setEnabled(true);
    }

       
    }//GEN-LAST:event_jCheckBox2MouseClicked

    private void jCheckBox3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox3MouseClicked
      
           if (jCheckBox3.isSelected()) {
        // Desactivar jCheckBox2
        jCheckBox1.setEnabled(false);
        jCheckBox2.setEnabled(false);
    } else {
        // Si jCheckBox1 no está seleccionado, activar jCheckBox2
        jCheckBox1.setEnabled(true);
        jCheckBox2.setEnabled(true);
    }
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox3MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
         // Llama a la función que realiza el cálculo de tiempos
    calcularTiempoTranscurrido((DefaultTableModel) jTable1.getModel());
    // TODO add your handling code here:
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       // Obtener la fila seleccionada
    int filaSeleccionada = jTable1.getSelectedRow();
    
    if (filaSeleccionada != -1) { // Verificar si hay una fila seleccionada
        // Obtener los valores de la fila seleccionada
        String nombreCli = (String) jTable1.getValueAt(filaSeleccionada, 0);
        String equipoCli = (String) jTable1.getValueAt(filaSeleccionada, 1);
        String danoEqui = (String) jTable1.getValueAt(filaSeleccionada, 2);
        String proceso = (String) jTable1.getValueAt(filaSeleccionada, 3);
        String repuestos = (String) jTable1.getValueAt(filaSeleccionada, 4);
        String fechaInicio = (String) jTable1.getValueAt(filaSeleccionada, 5);
        String fechaSalido = (String) jTable1.getValueAt(filaSeleccionada, 6);
        String estado = (String) jTable1.getValueAt(filaSeleccionada, 7);
        String tiempo = (String) jTable1.getValueAt(filaSeleccionada, 8);
        String detalle = (String) jTable1.getValueAt(filaSeleccionada, 9);

        // Conexión a la base de datos
        String url = "jdbc:mysql://localhost:3306/bd_reparaciones";
        String usuario = "root"; // Cambia esto según tu configuración
        String contraseña = ""; // Cambia esto según tu configuración

        Connection conexion = null;
        PreparedStatement pstInsert = null;
        PreparedStatement pstDelete = null;

        try {
            // Conectar a la base de datos
            conexion = DriverManager.getConnection(url, usuario, contraseña);

            // SQL para insertar el registro en la tabla Eliminados
            String insertSql = "INSERT INTO Eliminados (NombreCli, EquipoCli, DañoEqui, Proceso, Repuestos, FechaInicio, FechaSalido, Estado, Tiempo, Detalle) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            pstInsert = conexion.prepareStatement(insertSql);

            // Establecer los valores para el statement de inserción
            pstInsert.setString(1, nombreCli);
            pstInsert.setString(2, equipoCli);
            pstInsert.setString(3, danoEqui);
            pstInsert.setString(4, proceso);
            pstInsert.setString(5, repuestos);
            pstInsert.setString(6, fechaInicio);
            pstInsert.setString(7, fechaSalido);
            pstInsert.setString(8, estado);
            pstInsert.setString(9, tiempo);
            pstInsert.setString(10, detalle);

            // Ejecutar la inserción
            pstInsert.executeUpdate();

            // SQL para eliminar el registro de la tabla original (opcional)
            String deleteSql = "DELETE FROM tabreparacion WHERE NombreCli = ? AND EquipoCli = ? AND DañoEqui = ? AND Proceso = ? AND Repuestos = ? AND FechaInicio = ? AND FechaSalido = ? AND Estado = ?";
            pstDelete = conexion.prepareStatement(deleteSql);

            // Establecer los valores para el statement de eliminación
            pstDelete.setString(1, nombreCli);
            pstDelete.setString(2, equipoCli);
            pstDelete.setString(3, danoEqui);
            pstDelete.setString(4, proceso);
            pstDelete.setString(5, repuestos);
            pstDelete.setString(6, fechaInicio);
            pstDelete.setString(7, fechaSalido);
            pstDelete.setString(8, estado);

            // Ejecutar la eliminación
            pstDelete.executeUpdate();

            // Eliminar la fila de la tabla jTable1
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            modelo.removeRow(filaSeleccionada);

            // Mostrar mensaje de éxito
            JOptionPane.showMessageDialog(null, "Registro movido a la tabla Eliminados y eliminado de la tabla original exitosamente.");

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al mover el registro a la tabla Eliminados: " + e.getMessage());
        } finally {
            // Cerrar recursos
            try {
                if (pstInsert != null) pstInsert.close();
                if (pstDelete != null) pstDelete.close();
                if (conexion != null) conexion.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, selecciona un registro para eliminar.");
    }  // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
     
        // Limpiar la información de todos los campos de texto
    jTextField1.setText("");
    jTextField2.setText("");
    jTextField3.setText("");
    jTextField4.setText("");
    jTextField5.setText("");
         
// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    
    private void actualizarTiempoEquipo() {
    // Conexión a la base de datos
    String url = "jdbc:mysql://localhost:3306/bd_reparaciones";
    String usuario = "root"; // Cambia esto según tu configuración
    String contraseña = ""; // Cambia esto según tu configuración
    
    Connection conexion = null;
    PreparedStatement pst = null;
    
    // Obtener la fecha actual
    java.util.Date fechaActual = new java.util.Date();
    java.sql.Date fechaHoy = new java.sql.Date(fechaActual.getTime());
    
    try {
        // Conectar a la base de datos
        conexion = DriverManager.getConnection(url, usuario, contraseña);

        // SQL para obtener los datos de la tabla
        String sqlSelect = "SELECT NombreCli, FechaInicio FROM tabreparacion";
        java.sql.Statement stmt = conexion.createStatement();
        ResultSet rs = stmt.executeQuery(sqlSelect);
        
        // Preparar el statement para actualizar los datos
        String sqlUpdate = "UPDATE tabreparacion SET Tiempo = ? WHERE NombreCli = ?";
        pst = conexion.prepareStatement(sqlUpdate);

        while (rs.next()) {
            String nombreCli = rs.getString("NombreCli");
            java.sql.Date fechaInicio = rs.getDate("FechaInicio");

            if (fechaInicio != null) {
                // Calcular el tiempo transcurrido en días
                long diferenciaDias = (fechaHoy.getTime() - fechaInicio.getTime()) / (1000 * 60 * 60 * 24);
                int tiempo = (int) diferenciaDias;
                
                // Determinar el color basado en el tiempo
                if (tiempo > 60) {
                    tiempo = 60; // Limitar a 60 días si ya ha pasado más tiempo
                }
                
                // Actualizar la base de datos
                pst.setInt(1, tiempo);
                pst.setString(2, nombreCli);
                pst.executeUpdate();
            }
        }

        // Actualizar el renderizador de celdas para reflejar los cambios
        jTable1.repaint();

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al actualizar el tiempo: " + e.getMessage());
    } finally {
        // Cerrar recursos
        try {
            if (pst != null) pst.close();
            if (conexion != null) conexion.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
    
    
    public class TiempoColorRenderer extends DefaultTableCellRenderer {

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        
        if (value != null) {
            int tiempo = Integer.parseInt(value.toString());
            if (tiempo > 60) {
                cell.setBackground(Color.RED);
            } else {
                cell.setBackground(Color.WHITE);
            }
        } else {
            cell.setBackground(Color.WHITE);
        }
        
        return cell;
    }
}
    
    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PanelReparacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PanelReparacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PanelReparacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PanelReparacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PanelReparacion().setVisible(true);
            }
        });
    }

    private void Data() {
      Timer timer = new Timer(1000, new ActionListener() {
            

            @Override
            public void actionPerformed(ActionEvent e) {
                // Obtén la fecha y hora actual
                Date fechaHoraActual = new Date();
                
                // Define el formato en el que deseas mostrar la fecha y hora
                SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy | hh:mm:ss a");
                
                // Formatea la fecha y hora actual según el formato
                String fechaHoraFormateada = formato.format(fechaHoraActual);
                
                // Muestra la fecha y hora actual en el formato deseado
               // System.out.println("Fecha y Hora Actual: " + fechaHoraFormateada);
                jLabel3.setText(fechaHoraFormateada);
                
                
            }
            
        });
      
      // Inicia el temporizador
        timer.start();
                
        
                }
    
  
    private void cargarDatos() {
    // Obtén los datos de los campos de texto
    String nombreCli = jTextField1.getText();
    String equipoCli = jTextField2.getText();
    String danoEqui = jTextField3.getText();
    String proceso = jTextField4.getText();
    String repuestos = jTextField5.getText();
    String fechaStr = jLabel3.getText();
    
    // Determinar el estado basado en los JCheckBox
    String estado = "";
    if (jCheckBox1.isSelected()) {
        estado = "Reparado";
    } else if (jCheckBox2.isSelected()) {
        estado = "Pendiente";
    } else if (jCheckBox3.isSelected()) {
        estado = "Sin reparación";
    }
    
    // Conexión a la base de datos
    String url = "jdbc:mysql://localhost:3306/bd_reparaciones";
    String usuario = "root"; // Cambia esto según tu configuración
    String contraseña = ""; // Cambia esto según tu configuración
    
    Connection conexion = null;
    PreparedStatement pst = null;
    
    try {
        // Conectar a la base de datos
        conexion = DriverManager.getConnection(url, usuario, contraseña);
        
        // SQL para insertar datos en la tabla
        String sql = "INSERT INTO tabreparacion (NombreCli, EquipoCli, DañoEqui, Proceso, Repuestos, FechaInicio, FechaSalido, Estado, Tiempo, Detalle) " +
                     "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        
        // Preparar el statement
        pst = conexion.prepareStatement(sql);
        
        // Establecer los valores para el statement
        pst.setString(1, nombreCli);
        pst.setString(2, equipoCli);
        pst.setString(3, danoEqui);
        pst.setString(4, proceso);
        pst.setString(5, repuestos);
        pst.setString(6, fechaStr); // FechaInicio como texto
        pst.setString(7, null); // FechaSalido como texto
        pst.setString(8, estado); // Estado
        pst.setInt(9, 0); // Tiempo
        pst.setString(10, ""); // Detalle (temporariamente vacío)

        // Ejecutar la inserción
        pst.executeUpdate();

        // Mostrar un mensaje de éxito
        JOptionPane.showMessageDialog(null, "Datos cargados exitosamente");
        
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar los datos: " + e.getMessage());
    } finally {
        // Cerrar recursos
        try {
            if (pst != null) pst.close();
            if (conexion != null) conexion.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

private void solicitarDetalle(String nombreCli, String equipoCli, String danoEqui, String proceso, String repuestos, String estado) {
    // Solicitar el detalle de la reparación
    String detalle = JOptionPane.showInputDialog(null, "Ingrese el detalle de la reparación:");

    if (detalle != null && !detalle.trim().isEmpty()) {
        // Conexión a la base de datos
        String url = "jdbc:mysql://localhost:3306/bd_reparaciones";
        String usuario = "root"; // Cambia esto según tu configuración
        String contraseña = ""; // Cambia esto según tu configuración

        Connection conexion = null;
        PreparedStatement pst = null;

        try {
            // Conectar a la base de datos
            conexion = DriverManager.getConnection(url, usuario, contraseña);

            // SQL para actualizar el detalle en la tabla
            String updateSql = "UPDATE tabreparacion SET Detalle = ? WHERE NombreCli LIKE ? AND EquipoCli LIKE ? AND DañoEqui LIKE ? AND Proceso LIKE ? AND Repuestos LIKE ? AND Estado LIKE ?";
            pst = conexion.prepareStatement(updateSql);

            // Preparar los valores para el statement de actualización
            pst.setString(1, detalle);
            pst.setString(2, "%" + nombreCli.trim().toLowerCase() + "%");
            pst.setString(3, "%" + equipoCli.trim().toLowerCase() + "%");
            pst.setString(4, "%" + danoEqui.trim().toLowerCase() + "%");
            pst.setString(5, "%" + proceso.trim().toLowerCase() + "%");
            pst.setString(6, "%" + repuestos.trim().toLowerCase() + "%");
            pst.setString(7, "%" + estado.trim().toLowerCase() + "%");

            // Ejecutar la actualización
            int filasActualizadas = pst.executeUpdate();

            // Verificar si se actualizó correctamente
            if (filasActualizadas > 0) {
                JOptionPane.showMessageDialog(null, "Detalle actualizado exitosamente");
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró un registro que coincida con los criterios proporcionados.");
            }
            
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al actualizar el detalle: " + e.getMessage());
        } finally {
            // Cerrar recursos
            try {
                if (pst != null) pst.close();
                if (conexion != null) conexion.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "El detalle de la reparación no puede estar vacío.");
    }
}

  
  private void cargarDatosEnTabla() {
    DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
    modelo.setRowCount(0); // Limpia la tabla antes de cargar nuevos datos

    String url = "jdbc:mysql://localhost:3306/bd_reparaciones";
    String usuario = "root";
    String contraseña = "";

    Connection conexion = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    try {
        conexion = DriverManager.getConnection(url, usuario, contraseña);
        String sql = "SELECT * FROM tabreparacion";
        pst = conexion.prepareStatement(sql);
        rs = pst.executeQuery();

        while (rs.next()) {
            String nombreCli = rs.getString("NombreCli");
            String equipoCli = rs.getString("EquipoCli");
            String danoEqui = rs.getString("DañoEqui");
            String proceso = rs.getString("Proceso");
            String repuestos = rs.getString("Repuestos");
            String fechaInicioStr = rs.getString("FechaInicio");
            String fechaSalido = rs.getString("FechaSalido");
            String estado = rs.getString("Estado");
            String plazoMax = rs.getString("Detalle");

            // Guardar los datos en el modelo sin calcular el tiempo aún
            modelo.addRow(new Object[]{nombreCli, equipoCli, danoEqui, proceso, repuestos, fechaInicioStr, fechaSalido, estado, "", plazoMax});
        }

        // Aplicar el renderer a las columnas
        setupTableRenderer();

        // Calcular el tiempo transcurrido después de cargar los datos
        calcularTiempoTranscurrido(modelo);

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar los datos en la tabla: " + e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (conexion != null) conexion.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Detectar cambios en la tabla
    jTable1.getModel().addTableModelListener(tableModelEvent -> {
        if (tableModelEvent.getColumn() == 8) { // Columna Tiempo_equipo (índice 8)
            int row = tableModelEvent.getFirstRow();
            String nuevoTiempo = (String) jTable1.getValueAt(row, 8);
            actualizarTiempoEnBaseDeDatos(row, nuevoTiempo);
        }
    });
}
  
  private void calcularTiempoTranscurrido(DefaultTableModel modelo) {
    // Formato de la fecha que se muestra en jLabel3 y en la base de datos
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy | hh:mm:ss a");

    // Extrae la fecha actual completa desde jLabel3 y elimina cualquier prefijo
    String fechaActualStr = jLabel3.getText().replace("Fecha:", "").trim();
    
    // Verifica si la cadena de fecha no está vacía y parsea la fecha actual
    if (!fechaActualStr.isEmpty()) {
        LocalDate fechaActual = LocalDate.parse(fechaActualStr.split(" \\| ")[0], DateTimeFormatter.ofPattern("dd-MM-yyyy"));

        for (int i = 0; i < modelo.getRowCount(); i++) {
            String fechaInicioStr = (String) modelo.getValueAt(i, 5); // Columna de FechaInicio
            
            // Verifica si la fecha de inicio del registro no está vacía y parsea la fecha de inicio
            LocalDate fechaIngreso = null;
            if (fechaInicioStr != null && !fechaInicioStr.trim().isEmpty()) {
                try {
                    fechaIngreso = LocalDate.parse(fechaInicioStr.split(" \\| ")[0], DateTimeFormatter.ofPattern("dd-MM-yyyy"));
                } catch (DateTimeParseException ex) {
                    JOptionPane.showMessageDialog(null, "Error al analizar la fecha de inicio: " + ex.getMessage());
                }
            }

            if (fechaIngreso != null) {
                // Calcular días transcurridos entre la fecha de ingreso y la fecha actual
                long diasTranscurridos = ChronoUnit.DAYS.between(fechaIngreso, fechaActual);

                // Guardar el número de días en la columna `Tiempo`
                modelo.setValueAt(String.valueOf(diasTranscurridos), i, 8); // Columna Tiempo
            } else {
                // Si no se pudo parsear la fecha de inicio, asignar "N/A" a la columna Tiempo
                modelo.setValueAt("N/A", i, 8);
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, " * Aviso Actualiza Tiempo de espera * ");
    }
}


private void actualizarTiempoEnBaseDeDatos(int row, String nuevoTiempo) {
    String url = "jdbc:mysql://localhost:3306/bd_reparaciones";
    String usuario = "root";
    String contraseña = "";

    Connection conexion = null;
    PreparedStatement pst = null;

    try {
        conexion = DriverManager.getConnection(url, usuario, contraseña);
        String sql = "UPDATE tabreparacion SET Tiempo = ? WHERE NombreCli = ? AND EquipoCli = ?";
        pst = conexion.prepareStatement(sql);
        pst.setString(1, nuevoTiempo);
        pst.setString(2, (String) jTable1.getValueAt(row, 0)); // Nombre del cliente
        pst.setString(3, (String) jTable1.getValueAt(row, 1)); // Equipo del cliente

        pst.executeUpdate();

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al actualizar el tiempo en la base de datos: " + e.getMessage());
    } finally {
        try {
            if (pst != null) pst.close();
            if (conexion != null) conexion.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

private void setupTableRenderer() {
    jTable1.getColumnModel().getColumn(7).setCellRenderer(new ColorRenderer());
    jTable1.getColumnModel().getColumn(6).setCellRenderer(new FechaSalidaColorRenderer());
    jTable1.getColumnModel().getColumn(8).setCellRenderer(new TiempoRenderer()); // Aplicar renderer a la columna Tiempo
}


    public class FechaSalidaColorRenderer extends DefaultTableCellRenderer {

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

        if (value != null && !value.toString().trim().isEmpty()) {
            cell.setBackground(new Color(173, 216, 230)); // Azul cielo
        } else {
            cell.setBackground(Color.WHITE);
        }

        return cell;
    }
}
   
    public class ColorRenderer extends DefaultTableCellRenderer {

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        
        if (value != null) {
            String estado = value.toString();
            switch (estado) {
                case "Reparado":
                    cell.setBackground(Color.GREEN);
                    break;
                case "Pendiente":
                    cell.setBackground(Color.YELLOW);
                    break;
                case "Sin reparación":
                    cell.setBackground(Color.RED);
                    break;
                default:
                    cell.setBackground(Color.WHITE);
                    break;
            }
        }
        
        return cell;
    }
}
    
    
    public class TiempoRenderer extends DefaultTableCellRenderer {

    private static final long serialVersionUID = 1L;

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

        if (value instanceof String) {
            String tiempoStr = (String) value;
            try {
                // Asumiendo que `tiempoStr` es el número de días transcurridos
                int diasTranscurridos = Integer.parseInt(tiempoStr);

                if (diasTranscurridos <= 7) {
                    cell.setBackground(Color.GREEN);
                } else if (diasTranscurridos <= 30) {
                    cell.setBackground(Color.YELLOW);
                } else if (diasTranscurridos <= 60) {
                    cell.setBackground(Color.ORANGE);
                } else {
                    cell.setBackground(Color.RED);
                }
            } catch (NumberFormatException e) {
                cell.setBackground(Color.WHITE);
            }
        } else {
            cell.setBackground(Color.WHITE);
        }

        return cell;
    }
}
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
}
